h = 15
# iterate over all voxels
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model_poly = locfit(y ~ lp(x, deg = 2, h = h))
# generate predictions for all 210 time points
predictions = predict(model_poly, x)
# fit linear model
model_linear = lm(predictions ~ x)
# we measure activity as the MSE between local polynomial and linear model
#activity[i, j, k] = mean((predictions - predict(model_linear,data.frame(x)))^2)
}
}
}
}
# load package into R
library(NeatMap)
#'slice' the dataset along to z-axis (for 2-D image)
slice = activity[, , 16]
# eliminate noise and cap the maximum MSE per voxel this is simply to make
# the plots look cleaner
slice[slice < 10] = 0
slice[slice > 300] = 300
# generate a heat map
heatmap1(slice) + scale_fill_gradient(low = "black", high = "white")
# load the packages into R
library(fmri)
library(locfit)
# load the data
path<-("bold.nii")
data = read.NIFTI(path)
# extract voxel intensities
voxels = extract.data(data)
# extract mask from NIFTI file
mask = data$mask
# denote activity = mask, arbitrarily (used later)
activity = mask
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
2
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
2
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
# we choose bandwidth 15
h = 15
# iterate over all voxels
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model_poly = locfit(y ~ lp(x, deg = 2, h = h))
# generate predictions for all 210 time points
predictions = predict(model_poly, x)
# fit linear model
model_linear = lm(predictions ~ x)
# we measure activity as the MSE between local polynomial and linear model
#activity[i, j, k] = mean((predictions - predict(model_linear,data.frame(x)))^2)
}
}
}
}
# load the packages into R
library(fmri)
library(locfit)
# load the data
path<-("bold.nii")
data = read.NIFTI(path)
# extract voxel intensities
voxels = extract.data(data)
# extract mask from NIFTI file
mask = data$mask
# denote activity = mask, arbitrarily (used later)
activity = mask
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
2
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
2
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
# load the packages into R
library(fmri)
library(locfit)
# load the data
path<-("bold.nii")
data = read.NIFTI(path)
# extract voxel intensities
voxels = extract.data(data)
# extract mask from NIFTI file
mask = data$mask
# denote activity = mask, arbitrarily (used later)
activity = mask
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
2
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
2
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
data = read.NIFTI(path)
# extract voxel intensities
voxels = extract.data(data)
# extract mask from NIFTI file
mask = data$mask
# denote activity = mask, arbitrarily (used later)
activity = mask
# define various parameters
I = 64
J = 64
K = 33
L = 210
# we will be using CV to choose a bandwidth from:
H = c(5, 10, 15, 20, 25, 30, 35)
# randomly select 80% as training data the other 20% will be validation data
index = 1:210
per = round(210 * 0.8)
index_train = sample(index, per)
index_valid = index[-index_train]
# iterate over all bandwidths
for (h in H) {
num = 0
MSEs_train = c()
MSEs_valid = c()
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
# if mask == TRUE
if (mask[i, j, k]) {
# 210 observations to train from
y = voxels[i, j, k, ]
x = (1:L)
# fit local polynomial model with specified bandwidth
model = locfit(y[index_train] ~ lp(x[index_train], deg = 2,
h = h))
# calculate training and validation error
MSE_train = mean((predict(model, x[index_train]) - y[index_train])^2)
MSE_valid = mean((predict(model, x[index_valid]) - y[index_valid])^2)
MSEs_train = c(MSEs_train, MSE_train)
MSEs_valid = c(MSEs_valid, MSE_valid)
}
}
}
}
# print out MSE's
print(c(h, mean(MSEs_train), mean(MSEs_valid)))
}
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
source('~/.active-rstudio-document')
shinyServer()
shinyServer(
function(input,output,session){
})
source('~/.active-rstudio-document')
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
source('~/.active-rstudio-document')
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(shiny)
runExample("02_text")
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
source('~/.active-rstudio-document')
runApp('rstudio')
runApp('rstudio')
runApp('rstudio')
getwd()
# load the data
path<-'bold.nii'
# load the packages into R
library(fmri)
library(locfit)
# load the data
path<-'bold.nii'
data = read.NIFTI(path)
# extract voxel intensities
voxels = extract.data(data)
# extract mask from NIFTI file
mask = data$mask
# denote activity = mask, arbitrarily (used later)
activity = mask
source('~/.active-rstudio-document')
runApp('rstudio')
